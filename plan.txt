/*
1. set up the html page with style.css, bootstrap, handlebars, jquery and ajax in the head and main.js at body bottom

2. Hard code the current weather div, search form and button (type=button) and 5 day forecast into html for placement, 
  a)Current Weather Heading
  Current Weather:
  b)seach input and search button inline
  c)current temperature in degrees(of Farenheit but don't need to put F necessarily)
  d)Under degrees the city and state
  e)under city/state the condition (like cloudy)
  f)consider making room for an icon (cloud, rain, sun)
  5day forecast: 5 boxes inline each containing:
  g)that day's condition
  h) that day's temperature
  i) weather icon
  g) day of the week


3. Adjust the formatting with bootstrap and style.css to get the look and layout how we want, play around with row and col attributes of bootstrap
  -choose a cool font to use!

4. Turn our hard coded current and 5 day forecast into 2 handlebars templates, one for the current weather and one template for one day of the 5 day forecast

5. Put the "blanks" in the handlebars template showing the data we'll need to fill in and use descriptive name (that will be the keys of our city weather object)

5.4. Create a temporary object that will hold the variable names we chose in the handlebars template

5.4.1 Test handlebars templates and hardcoded temp objects

5.5 Study the weather api and copy some values to hardcode into our temp obj

6. Create an array that will hold objects of the a city's current weather and 5 day forecast information

7. Test the handlebars with our hardcoded city object, using the current weather only

8. Figure out how to get the 5 day forecast from the timestamps in the weather api, they are in 3hr block so there will be 8 per day and add that to our temp object

10. Test handlebars to append the current weather AND loop through the daily weather data from the hardcoded object

11. Add a click event handler to the search button, grab the city name from the input field 

12. Create a fetch function with a city parameter, that will be called in the click event handler with the city as the argument

13. Manipulate the city data to be able to send to the weather api in the appropriate format, if needed

14. Fill out the fetch function with $.ajax method
  -we might need to make more than one ajax request, tbd
  -NOTE: The endpoints openweather.org provide do not, by default, include an https:// prefix. If you intend to use Javascript's fetch API, you'll need to include this prefix in your endpoint, or else you'll receive a status error of 404.

15. Under ajax.success, send the data to a function called addCityToArray

16. In same ajax.success, call the renderCityWeather function (still not sure whether to put this function here)(but don't pass the data, the data should already be in the array and that's where we render)

17. Create addCityToArray function, create an object inside with only the pertinent data we need and push that object into the city array

18. Create the renderWeather() function where it will first clear the div containing a city's weather, it will grab the data object (which was formatted with just the properties we need) and use handlebars to now fill our html string with blanks into html with blanks filled in

19. Lastly under renderWeather(), append the newHtml to the divs for current weather and weather forecast

20. ExtensionS, tbd








*/